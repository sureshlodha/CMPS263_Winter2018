Challenges:

1. Lot of data parsing -- the census data is very inconsistent and is divided among two sources -- had to do data munging to make the data useable.
2. The census tract IDs supplied in the data and the shape file are not of the same nature -- had to process them in order to join them with the shape files.
3. The shape file projects were at a high resolution, and were overflowing the screen -- had to resize the projects
	-- played around between d3.geoConicEqualArea() and d3.geoTransverseMercator() projections




Command line commands:
---------------------------

geoproject 'd3.geoConicEqualArea().parallels([34, 40.5]).rotate([120, 0]).fitSize([800, 600], d)' < ca.json > ca-albers.json

ndjson-split 'd.features' < ca-albers.json > ca-albers.ndjson

ndjson-map 'd.id = d.properties.FIRST_STFI, d' < ca-albers.ndjson > ca-albers-id.ndjson

ndjson-cat {race}.json  | ndjson-split 'd.slice(1)'   | ndjson-map '{id: d[1], percentage: +d[0]}' > data.ndjson

ndjson-join 'd.id'  ca-albers-id.ndjson  data.ndjson > ca-albers-join.ndjson

ndjson-map 'd[0].properties = {density: Math.floor(d[1].percentage)}, d[0]' < ca-albers-join.ndjson > ca-albers-density.ndjson

ndjson-map -r d3 '(d.properties.fill = d3.scaleSequential(d3.interpolateViridis).domain([0, 100])(d.properties.density), d)' <ca-albers-density.ndjson > ca-albers-color.ndjson


############
geo2svg -n -p 1 -w 960 -h 960 < ca-albers-color.ndjson > ca-albers-color.svg
geo2svg -n --stroke none -p 1 -w 960 -h 960 < ca-albers-color.ndjson > ca-albers-color.svg 
#######################3

geo2topo -n tracts=ca-albers-density.ndjson > ca-tracts-topo.json
toposimplify -p 1 -f  < ca-tracts-topo.json > ca-simple-topo.json
topoquantize 1e5 < ca-simple-topo.json > ca-quantized-topo.json